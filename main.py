from aiogram import Bot, Dispatcher, executor, types
from asyncio import sleep
import markups
import random

bot = Bot(token = '–í–ê–® –¢–û–ö–ï–ù')
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    sticker = open('AnimatedSticker.tgs', 'rb')
    await message.answer_sticker(sticker)
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name} ({0.username})!\n'
                        '–Ø –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –≤–µ—Å–µ–ª–æ–≥–æ –≤—Ä–µ–º—è–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è.\n'
                        '–í–∞—à ID: {0.id}'.format(message.from_user), reply_markup = markups.mainMenu)

@dp.message_handler(lambda message: message.text == '‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def MainMenu(message: types.Message):
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name} ({0.username})!\n'
                        '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n'
                        '–í–∞—à ID: {0.id}'.format(message.from_user), reply_markup = markups.mainMenu)

@dp.message_handler(lambda message: message.text == 'üé∞ –í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É')
async def GameSelection(message: types.Message):
    await message.answer('üé∞ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É', reply_markup = markups.gameMenu)

@dp.message_handler(lambda message: message.text == 'üí∞ –£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å')
async def Balance(message: types.Message):
    await message.answer('–í–∞—à –±–∞–ª–∞–Ω—Å: 0', reply_markup = markups.balanceMenu)

@dp.message_handler(lambda message: message.text == 'üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')
async def TopUpBalance(message: types.Message):
    await message.answer('–ö–æ–º–∞–Ω–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')

@dp.message_handler(lambda message: message.text == 'üë§ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞')
async def Support(message: types.Message):
    await message.answer('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–¥–∞: @chp0ker1337')

@dp.message_handler(lambda message: message.text == 'ü™ô –û—Ä–µ–ª –∏ –†–µ—à–∫–∞')
async def HeadsAndTails(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –û—Ä–µ–ª –∏–ª–∏ –†–µ—à–∫–∞', reply_markup = markups.coinMenu)
@dp.message_handler(lambda message: message.text == 'ü™ô –û—Ä–µ–ª' or message.text == 'ü™ô –†–µ—à–∫–∞')
async def ChoosingSide(message: types.Message):
    heads = open('coin-heads.webp', 'rb')
    tails = open('coin-tails.webp', 'rb')
    side_tuple = ['ü™ô –û—Ä–µ–ª', 'ü™ô –†–µ—à–∫–∞']
    random_side = random.choice(side_tuple)
    if random_side == message.text:
        if random_side == 'ü™ô –û—Ä–µ–ª':
            await message.answer_sticker(heads)
            await sleep(0.5)
            await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –í—ã–ø–∞–ª–∞ —Å—Ç–æ—Ä–æ–Ω–∞: ' + str(random_side))
        elif random_side == 'ü™ô –†–µ—à–∫–∞':
            await message.answer_sticker(tails)
            await sleep(0.5)
            await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –í—ã–ø–∞–ª–∞ —Å—Ç–æ—Ä–æ–Ω–∞: ' + str(random_side))
    elif random_side != message.text:
        if random_side == 'ü™ô –û—Ä–µ–ª':
            await message.answer_sticker(heads)
            await sleep(0.5)
            await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –í—ã–ø–∞–ª–∞ —Å—Ç–æ—Ä–æ–Ω–∞: ' + str(random_side))
        elif random_side == 'ü™ô –†–µ—à–∫–∞':
            await message.answer_sticker(tails)
            await sleep(0.5)
            await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –í—ã–ø–∞–ª–∞ —Å—Ç–æ—Ä–æ–Ω–∞: ' + str(random_side))

@dp.message_handler(lambda message: message.text == 'üé≤ –ö–æ—Å—Ç–∏')
async def Dice(message: types.Message):
    await bot.send_message(message.chat.id, 'üé≤ –ë—Ä–æ—Å—å—Ç–µ –∫–æ—Å—Ç–∏', reply_markup = markups.diceMenu)
@dp.message_handler(lambda message: message.text == 'üé≤ –ë—Ä–æ—Å–∏—Ç—å –ö–æ—Å—Ç–∏')
async def Dice(message: types.Message):
    await message.answer('üé≤ –í–∞—à–∏ –∫–æ—Å—Ç–∏:')
    user_data = await bot.send_dice(message.from_user.id)
    user_data = user_data['dice']['value']
    await sleep(2)
    await message.answer ('üé≤ –ö–æ—Å—Ç–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:')
    bot_data = await bot.send_dice(message.from_user.id)
    bot_data = bot_data['dice']['value']
    await sleep(4)
    if user_data > bot_data:
        await bot.send_message(message.chat.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏!')
    elif user_data < bot_data:
        await bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!')
    elif user_data == bot_data:
        await bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–∏—á—å—è!')

@dp.message_handler(lambda message: message.text == 'ü§ë –ù–∞–ø–µ—Ä—Å—Ç–∫–∏')
async def Thimbles(message: types.Message):
    await bot.send_message(message.chat.id, '–ò–≥—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')

if __name__ == '__main__':
    executor.start_polling(dp)

